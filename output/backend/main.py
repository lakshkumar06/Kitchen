{"main.py": "# main.py\nfrom fastapi import FastAPI, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom typing import List\n\nfrom . import models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n@app.post(\"/users/\", response_model=schemas.User, status_code=status.HTTP_201_CREATED)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = models.User(**user.dict())\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n@app.get(\"/users/\", response_model=List[schemas.User])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = db.query(models.User).offset(skip).limit(limit).all()\n    return users\n\n@app.get(\"/users/{user_id}\", response_model=schemas.User)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = db.query(models.User).filter(models.User.id == user_id).first()\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n@app.post(\"/clicks/\", response_model=schemas.Click, status_code=status.HTTP_201_CREATED)\ndef create_click(click: schemas.ClickCreate, db: Session = Depends(get_db)):\n    db_click = models.Click(**click.dict())\n    db.add(db_click)\n    db.commit()\n    db.refresh(db_click)\n    return db_click\n\n@app.get(\"/clicks/\", response_model=List[schemas.Click])\ndef read_clicks(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    clicks = db.query(models.Click).offset(skip).limit(limit).all()\n    return clicks", "models.py": "# models.py\nfrom sqlalchemy import Column, Integer, String, ForeignKey\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String, unique=True, index=True)\n\n    clicks = relationship(\"Click\", back_populates=\"user\")\n\nclass Click(Base):\n    __tablename__ = \"clicks\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\"))\n    click_count = Column(Integer, default=0)\n\n    user = relationship(\"User\", back_populates=\"clicks\")"}