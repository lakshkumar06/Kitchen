{"main.py": "from fastapi import FastAPI, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom typing import List\n\nfrom . import models, schemas, crud\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n@app.post(\"/cookies/\", response_model=schemas.Cookie, status_code=201)\ndef create_cookie(cookie: schemas.CookieCreate, db: Session = Depends(get_db)):\n    return crud.create_cookie(db=db, cookie=cookie)\n\n@app.get(\"/cookies/\", response_model=List[schemas.Cookie])\ndef read_cookies(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    cookies = crud.get_cookies(db, skip=skip, limit=limit)\n    return cookies\n\n@app.get(\"/cookies/{cookie_id}\", response_model=schemas.Cookie)\ndef read_cookie(cookie_id: int, db: Session = Depends(get_db)):\n    db_cookie = crud.get_cookie(db, cookie_id=cookie_id)\n    if db_cookie is None:\n        raise HTTPException(status_code=404, detail=\"Cookie not found\")\n    return db_cookie\n\n@app.put(\"/cookies/{cookie_id}\", response_model=schemas.Cookie)\ndef update_cookie(cookie_id: int, cookie: schemas.CookieUpdate, db: Session = Depends(get_db)):\n    db_cookie = crud.update_cookie(db, cookie_id, cookie)\n    if db_cookie is None:\n        raise HTTPException(status_code=404, detail=\"Cookie not found\")\n    return db_cookie\n\n@app.delete(\"/cookies/{cookie_id}\", response_model=schemas.Cookie)\ndef delete_cookie(cookie_id: int, db: Session = Depends(get_db)):\n    db_cookie = crud.delete_cookie(db, cookie_id=cookie_id)\n    if db_cookie is None:\n        raise HTTPException(status_code=404, detail=\"Cookie not found\")\n    return db_cookie", "models.py": "from sqlalchemy import Column, Integer, String, Float, ForeignKey\nfrom sqlalchemy.orm import relationship\n\nfrom .database import Base\n\nclass Cookie(Base):\n    __tablename__ = \"cookies\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, index=True)\n    price = Column(Float)\n    description = Column(String)\n\n    ingredients = relationship(\"Ingredient\", back_populates=\"cookie\")\n\nclass Ingredient(Base):\n    __tablename__ = \"ingredients\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, index=True)\n    quantity = Column(Float)\n    cookie_id = Column(Integer, ForeignKey(\"cookies.id\"))\n\n    cookie = relationship(\"Cookie\", back_populates=\"ingredients\")"}